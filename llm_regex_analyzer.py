#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
LLM Regex Analyzer - –≥–∏–±—Ä–∏–¥–Ω—ã–π –ø–æ–¥—Ö–æ–¥
–õ–æ–≥–∏–∫–∞:
1. LLM –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –¥–æ–∫—É–º–µ–Ω—Ç –∏ –Ω–∞—Ö–æ–¥–∏—Ç –¥–∞–Ω–Ω—ã–µ
2. LLM –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç regex –ø–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
3. –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞: –¥–∞–Ω–Ω—ã–µ + regex
4. –ú–æ–∂–µ–º –ø—Ä–∏–º–µ–Ω–∏—Ç—å regex –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏
"""

import argparse
import json
import requests
import re
from pathlib import Path
from typing import Dict, List, Any, Optional
import urllib3
urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)


class LLMRegexAnalyzer:
    """–ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ —Å –≥–µ–Ω–µ—Ä–∞—Ü–∏–µ–π regex —á–µ—Ä–µ–∑ LLM"""
    
    def __init__(self, ollama_url: str, model: str, token: Optional[str] = None, verify_ssl: bool = True):
        self.ollama_url = ollama_url.rstrip('/')
        self.model = model
        self.token = token
        self.session = requests.Session()
        self.session.verify = verify_ssl
        if token:
            self.session.headers.update({'X-Access-Token': token})
    
    def test_connection(self) -> bool:
        """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å Ollama"""
        try:
            response = self.session.get(f"{self.ollama_url}/api/tags")
            if response.status_code == 200:
                print("‚úÖ –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å Ollama —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
                return True
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: {response.status_code}")
                return False
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: {e}")
            return False
    
    def call_ollama(self, prompt: str, temperature: float = 0.1) -> Optional[str]:
        """–í—ã–∑—ã–≤–∞–µ—Ç Ollama API"""
        try:
            payload = {
                "model": self.model,
                "prompt": prompt,
                "stream": False,
                "options": {
                    "temperature": temperature,
                    "top_p": 0.9,
                    "num_predict": 8000  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –ª–∏–º–∏—Ç –¥–ª—è –±–æ–ª—å—à–∏—Ö JSON
                }
            }
            
            print(f"ü§ñ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ LLM (–º–æ–¥–µ–ª—å: {self.model})...")
            response = self.session.post(f"{self.ollama_url}/api/generate", 
                                       json=payload, 
                                       timeout=300)
            
            if response.status_code == 200:
                result = response.json()
                return result.get('response', '').strip()
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ API: {response.status_code} - {response.text}")
                return None
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–∑–æ–≤–∞ Ollama: {e}")
            return None
    
    def load_instructions(self, instructions_file: Path) -> str:
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –∏–∑ —Ñ–∞–π–ª–∞"""
        try:
            with open(instructions_file, 'r', encoding='utf-8') as f:
                instructions = f.read()
            print(f"üìù –ó–∞–≥—Ä—É–∂–µ–Ω—ã –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏: {instructions_file.name}")
            return instructions
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π: {e}")
            return ""
    
    def analyze_document(self, text: str, instructions: str) -> Dict[str, Any]:
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –¥–æ–∫—É–º–µ–Ω—Ç —Å –ø–æ–º–æ—â—å—é LLM"""
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–ª–Ω—ã–π –ø—Ä–æ–º–ø—Ç
        full_prompt = f"""{instructions}

‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
–¢–ï–ö–°–¢ –î–û–ö–£–ú–ï–ù–¢–ê –î–õ–Ø –ê–ù–ê–õ–ò–ó–ê:
‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê

{text}

‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê

–ü–†–û–ê–ù–ê–õ–ò–ó–ò–†–£–ô —ç—Ç–æ—Ç –¥–æ–∫—É–º–µ–Ω—Ç —Å–æ–≥–ª–∞—Å–Ω–æ –í–°–ï–ú –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º –≤—ã—à–µ.
–î–ª—è –ö–ê–ñ–î–û–ì–û —Ä–∞–∑–¥–µ–ª–∞:
1. –ù–∞–π–¥–∏ –¥–∞–Ω–Ω—ã–µ –≤ —Ç–µ–∫—Å—Ç–µ
2. –°–æ–∑–¥–∞–π regex –ø–∞—Ç—Ç–µ—Ä–Ω—ã

–í–µ—Ä–Ω–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON –∫–∞–∫ —É–∫–∞–∑–∞–Ω–æ –≤ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è—Ö.
–¢–û–õ–¨–ö–û JSON, –±–µ–∑ markdown –±–ª–æ–∫–æ–≤!
"""
        
        print("üîÑ –≠—Ç–∞–ø 1: –ê–Ω–∞–ª–∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏—è regex –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤...")
        print(f"   –†–∞–∑–º–µ—Ä –¥–æ–∫—É–º–µ–Ω—Ç–∞: {len(text)} —Å–∏–º–≤–æ–ª–æ–≤")
        print(f"   –†–∞–∑–º–µ—Ä –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π: {len(instructions)} —Å–∏–º–≤–æ–ª–æ–≤")
        
        response = self.call_ollama(full_prompt, temperature=0.1)
        
        if not response:
            print("‚ùå –ù–µ –ø–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –æ—Ç LLM")
            return {}
        
        # –ü–∞—Ä—Å–∏–º JSON –∏–∑ –æ—Ç–≤–µ—Ç–∞
        try:
            # –£–±–∏—Ä–∞–µ–º markdown –±–ª–æ–∫–∏ –µ—Å–ª–∏ –µ—Å—Ç—å
            if '```' in response:
                json_start = response.find('{')
                json_end = response.rfind('}') + 1
                if json_start != -1 and json_end != -1:
                    response = response[json_start:json_end]
            
            result = json.loads(response)
            print("‚úÖ –£—Å–ø–µ—à–Ω–æ —Ä–∞—Å–ø–∞—Ä—Å–µ–Ω JSON –æ—Ç LLM")
            return result
            
        except json.JSONDecodeError as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON: {e}")
            print(f"   –ü–µ—Ä–≤—ã–µ 500 —Å–∏–º–≤–æ–ª–æ–≤ –æ—Ç–≤–µ—Ç–∞:\n{response[:500]}...")
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º raw –æ—Ç–≤–µ—Ç –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
            return {
                "error": "json_parse_error",
                "raw_response": response[:2000]
            }
    
    def validate_with_regex(self, text: str, regex_patterns: Dict[str, Any]) -> Dict[str, Any]:
        """–í–∞–ª–∏–¥–∏—Ä—É–µ—Ç –∏–∑–≤–ª–µ—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Å –ø–æ–º–æ—â—å—é regex"""
        print("üîÑ –≠—Ç–∞–ø 2: –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö —Å –ø–æ–º–æ—â—å—é regex...")
        
        validation_results = {}
        
        for section_name, section_data in regex_patterns.items():
            if 'regex_patterns' not in section_data:
                continue
            
            validation_results[section_name] = {}
            patterns = section_data['regex_patterns']
            
            for field_name, pattern_info in patterns.items():
                if not isinstance(pattern_info, dict) or 'pattern' not in pattern_info:
                    continue
                
                pattern = pattern_info['pattern']
                flags_list = pattern_info.get('flags', [])
                
                # –§–æ—Ä–º–∏—Ä—É–µ–º —Ñ–ª–∞–≥–∏
                flags = 0
                if 'MULTILINE' in flags_list:
                    flags |= re.MULTILINE
                if 'IGNORECASE' in flags_list:
                    flags |= re.IGNORECASE
                if 'DOTALL' in flags_list:
                    flags |= re.DOTALL
                
                try:
                    # –ü—ã—Ç–∞–µ–º—Å—è –ø—Ä–∏–º–µ–Ω–∏—Ç—å regex
                    matches = re.findall(pattern, text, flags)
                    
                    validation_results[section_name][field_name] = {
                        "pattern_valid": True,
                        "matches_found": len(matches) if matches else 0,
                        "first_match": matches[0] if matches else None
                    }
                    
                except re.error as e:
                    validation_results[section_name][field_name] = {
                        "pattern_valid": False,
                        "error": str(e)
                    }
        
        return validation_results
    
    def save_results(self, results: Dict[str, Any], output_file: Path):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã"""
        try:
            with open(output_file, 'w', encoding='utf-8') as f:
                json.dump(results, f, ensure_ascii=False, indent=2)
            print(f"üíæ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã: {output_file}")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {e}")
    
    def extract_regex_patterns_only(self, analysis_result: Dict[str, Any]) -> Dict[str, Any]:
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç —Ç–æ–ª—å–∫–æ regex –ø–∞—Ç—Ç–µ—Ä–Ω—ã –∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –∞–Ω–∞–ª–∏–∑–∞"""
        regex_only = {}
        
        if 'sections' in analysis_result:
            for section_name, section_data in analysis_result['sections'].items():
                if isinstance(section_data, dict) and 'regex_patterns' in section_data:
                    regex_only[section_name] = section_data['regex_patterns']
        
        return regex_only
    
    def extract_data_only(self, analysis_result: Dict[str, Any]) -> Dict[str, Any]:
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç —Ç–æ–ª—å–∫–æ –∏–∑–≤–ª–µ—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –∞–Ω–∞–ª–∏–∑–∞"""
        data_only = {}
        
        if 'sections' in analysis_result:
            for section_name, section_data in analysis_result['sections'].items():
                if isinstance(section_data, dict) and 'extracted_data' in section_data:
                    data_only[section_name] = section_data['extracted_data']
        
        return data_only


def main():
    parser = argparse.ArgumentParser(
        description='LLM Regex Analyzer - –∞–Ω–∞–ª–∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ —Å –≥–µ–Ω–µ—Ä–∞—Ü–∏–µ–π regex'
    )
    parser.add_argument('--file', '-f', required=True,
                       help='–ü—É—Ç—å –∫ —Ç–µ–∫—Å—Ç–æ–≤–æ–º—É —Ñ–∞–π–ª—É –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏')
    parser.add_argument('--instructions', '-i', 
                       default='instructions_regex_generation.txt',
                       help='–§–∞–π–ª —Å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º–∏ –¥–ª—è LLM')
    parser.add_argument('--output', '-o',
                       help='–í—ã—Ö–æ–¥–Ω–æ–π JSON —Ñ–∞–π–ª (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: –∏–º—è_—Ñ–∞–π–ª–∞_analyzed.json)')
    parser.add_argument('--regex-output', '-r',
                       help='–§–∞–π–ª –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç–æ–ª—å–∫–æ regex (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: –∏–º—è_—Ñ–∞–π–ª–∞.regex.json)')
    parser.add_argument('--data-output', '-d',
                       help='–§–∞–π–ª –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç–æ–ª—å–∫–æ –¥–∞–Ω–Ω—ã—Ö (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: –∏–º—è_—Ñ–∞–π–ª–∞.data.json)')
    parser.add_argument('--validate', action='store_true',
                       help='–í–∞–ª–∏–¥–∏—Ä–æ–≤–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å –ø–æ–º–æ—â—å—é —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö regex')
    parser.add_argument('--ollama-url', default='http://localhost:11434',
                       help='URL Ollama —Å–µ—Ä–≤–µ—Ä–∞')
    parser.add_argument('--model', '-m', required=True,
                       help='–ù–∞–∑–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏ Ollama')
    parser.add_argument('--token', '-t',
                       help='–¢–æ–∫–µ–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏')
    parser.add_argument('--no-ssl-verify', action='store_true',
                       help='–û—Ç–∫–ª—é—á–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É SSL')
    
    args = parser.parse_args()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ö–æ–¥–Ω–æ–π —Ñ–∞–π–ª
    input_file = Path(args.file)
    if not input_file.exists():
        print(f"‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {input_file}")
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∞–π–ª —Å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º–∏
    instructions_file = Path(args.instructions)
    if not instructions_file.exists():
        print(f"‚ùå –§–∞–π–ª —Å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω: {instructions_file}")
        return
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≤—ã—Ö–æ–¥–Ω—ã–µ —Ñ–∞–π–ª—ã
    if args.output:
        output_file = Path(args.output)
    else:
        output_file = input_file.parent / f"{input_file.stem}_analyzed.json"
    
    if args.regex_output:
        regex_output_file = Path(args.regex_output)
    else:
        regex_output_file = input_file.parent / f"{input_file.stem}.regex.json"
    
    if args.data_output:
        data_output_file = Path(args.data_output)
    else:
        data_output_file = input_file.parent / f"{input_file.stem}.data.json"
    
    # –°–æ–∑–¥–∞–µ–º –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä
    analyzer = LLMRegexAnalyzer(
        args.ollama_url,
        args.model,
        args.token,
        verify_ssl=not args.no_ssl_verify
    )
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
    if not analyzer.test_connection():
        return
    
    # –ß–∏—Ç–∞–µ–º —Ñ–∞–π–ª—ã
    try:
        with open(input_file, 'r', encoding='utf-8') as f:
            text = f.read()
        print(f"üìÑ –ó–∞–≥—Ä—É–∂–µ–Ω –¥–æ–∫—É–º–µ–Ω—Ç: {input_file.name} ({len(text)} —Å–∏–º–≤–æ–ª–æ–≤)")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞: {e}")
        return
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏
    instructions = analyzer.load_instructions(instructions_file)
    if not instructions:
        return
    
    print("\n" + "="*70)
    print("üöÄ –ù–ê–ß–ò–ù–ê–ï–ú –ê–ù–ê–õ–ò–ó")
    print("="*70)
    
    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–æ–∫—É–º–µ–Ω—Ç
    analysis_result = analyzer.analyze_document(text, instructions)
    
    if not analysis_result or 'error' in analysis_result:
        print("\n‚ùå –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –æ—à–∏–±–∫–æ–π")
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—à–∏–±–∫—É –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        error_file = input_file.parent / f"{input_file.stem}_error.json"
        analyzer.save_results(analysis_result, error_file)
        return
    
    # –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç–∞–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
    full_result = {
        "file_info": {
            "source_file": input_file.name,
            "instructions_file": instructions_file.name,
            "analysis_method": "llm_regex_hybrid",
            "model": args.model
        },
        "analysis_result": analysis_result
    }
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    analyzer.save_results(full_result, output_file)
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–ª—å–∫–æ regex –ø–∞—Ç—Ç–µ—Ä–Ω—ã
    regex_patterns = analyzer.extract_regex_patterns_only(analysis_result)
    if regex_patterns:
        regex_result = {
            "file_info": {
                "source_file": input_file.name,
                "pattern_source": "llm_generated",
                "model": args.model
            },
            "patterns": regex_patterns
        }
        analyzer.save_results(regex_result, regex_output_file)
        print(f"üìù Regex –ø–∞—Ç—Ç–µ—Ä–Ω—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –æ—Ç–¥–µ–ª—å–Ω–æ: {regex_output_file}")
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–ª—å–∫–æ –¥–∞–Ω–Ω—ã–µ
    extracted_data = analyzer.extract_data_only(analysis_result)
    if extracted_data:
        data_result = {
            "file_info": {
                "source_file": input_file.name,
                "extraction_method": "llm_analysis",
                "model": args.model
            },
            "extracted_data": extracted_data
        }
        analyzer.save_results(data_result, data_output_file)
        print(f"üìä –ò–∑–≤–ª–µ—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –æ—Ç–¥–µ–ª—å–Ω–æ: {data_output_file}")
    
    # –í–∞–ª–∏–¥–∞—Ü–∏—è —Å –ø–æ–º–æ—â—å—é regex (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
    if args.validate and regex_patterns:
        print("\n" + "="*70)
        print("üîç –í–ê–õ–ò–î–ê–¶–ò–Ø REGEX –ü–ê–¢–¢–ï–†–ù–û–í")
        print("="*70)
        
        validation_result = analyzer.validate_with_regex(text, analysis_result.get('sections', {}))
        
        validation_file = input_file.parent / f"{input_file.stem}_validation.json"
        analyzer.save_results({
            "file_info": {
                "source_file": input_file.name,
                "validation_method": "regex_matching"
            },
            "validation_results": validation_result
        }, validation_file)
        
        print(f"‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤–∞–ª–∏–¥–∞—Ü–∏–∏: {validation_file}")
    
    print("\n" + "="*70)
    print("‚úÖ –ê–ù–ê–õ–ò–ó –ó–ê–í–ï–†–®–ï–ù!")
    print("="*70)
    print(f"üìÅ –ü–æ–ª–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {output_file}")
    print(f"üìù Regex –ø–∞—Ç—Ç–µ—Ä–Ω—ã: {regex_output_file}")
    print(f"üìä –ò–∑–≤–ª–µ—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: {data_output_file}")
    if args.validate:
        print(f"üîç –í–∞–ª–∏–¥–∞—Ü–∏—è: {validation_file}")


if __name__ == "__main__":
    main()

