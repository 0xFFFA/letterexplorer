#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
LLM-based –ø–∞—Ä—Å–µ—Ä —Å —á–µ–ª–æ–≤–µ—á–µ—Å–∫–∏–º–∏ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º–∏
–ß–µ–ª–æ–≤–µ–∫ –ø–∏—à–µ—Ç –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –Ω–∞ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ–º —è–∑—ã–∫–µ, LLM –∏—Ö –≤—ã–ø–æ–ª–Ω—è–µ—Ç
"""

import re
import json
import argparse
import requests
import urllib3
from pathlib import Path
from typing import Dict, List, Any, Optional

# –û—Ç–∫–ª—é—á–∞–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è SSL
urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)


class LLMInstructionParser:
    """–ü–∞—Ä—Å–µ—Ä –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ LLM –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π"""
    
    def __init__(self, ollama_url: str, model: str, token: Optional[str] = None, 
                 verify_ssl: bool = True):
        self.ollama_url = ollama_url.rstrip('/')
        self.model = model
        self.verify_ssl = verify_ssl
        
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Å–µ—Å—Å–∏—é
        self.session = requests.Session()
        if token:
            self.session.headers['X-Access-Token'] = token
    
    def parse_instructions_file(self, instructions_path: str) -> List[Dict[str, Any]]:
        """–ü–∞—Ä—Å–∏—Ç —Ñ–∞–π–ª —Å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º–∏ –Ω–∞ –∑–∞–¥–∞—á–∏"""
        with open(instructions_path, 'r', encoding='utf-8') as f:
            content = f.read()
        
        tasks = []
        
        # –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ –∑–∞–¥–∞—á–∏ –ø–æ –º–∞—Ä–∫–µ—Ä—É [TASK: –Ω–∞–∑–≤–∞–Ω–∏–µ]
        task_pattern = r'\[TASK:\s*(.+?)\](.*?)(?=\[TASK:|$)'
        matches = re.finditer(task_pattern, content, re.DOTALL)
        
        for match in matches:
            task_name = match.group(1).strip()
            task_content = match.group(2).strip()
            
            # –†–∞–∑–±–∏—Ä–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –∑–∞–¥–∞—á–∏
            description = ""
            output_key = task_name
            output_format = "json"
            
            # –ò—â–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –¥–∏—Ä–µ–∫—Ç–∏–≤—ã
            if '@OUTPUT_KEY:' in task_content:
                key_match = re.search(r'@OUTPUT_KEY:\s*(\S+)', task_content)
                if key_match:
                    output_key = key_match.group(1)
                    task_content = task_content.replace(key_match.group(0), '')
            
            if '@FORMAT:' in task_content:
                format_match = re.search(r'@FORMAT:\s*(\S+)', task_content)
                if format_match:
                    output_format = format_match.group(1)
                    task_content = task_content.replace(format_match.group(0), '')
            
            description = task_content.strip()
            
            tasks.append({
                'name': task_name,
                'output_key': output_key,
                'description': description,
                'format': output_format
            })
        
        return tasks
    
    def call_llm(self, prompt: str) -> str:
        """–í—ã–∑–æ–≤ LLM —á–µ—Ä–µ–∑ Ollama API"""
        try:
            url = f"{self.ollama_url}/api/generate"
            
            payload = {
                "model": self.model,
                "prompt": prompt,
                "stream": False,
                "options": {
                    "temperature": 0.1,  # –ù–∏–∑–∫–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –¥–ª—è —Ç–æ—á–Ω–æ—Å—Ç–∏
                    "num_predict": 4096
                }
            }
            
            response = self.session.post(
                url,
                json=payload,
                verify=self.verify_ssl,
                timeout=300
            )
            
            if response.status_code == 200:
                result = response.json()
                return result.get('response', '')
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ LLM API: {response.status_code}")
                print(f"   {response.text}")
                return ""
        
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–∑–æ–≤–µ LLM: {e}")
            return ""
    
    def execute_task(self, task: Dict[str, Any], document_text: str) -> Any:
        """–í—ã–ø–æ–ª–Ω—è–µ—Ç –æ–¥–Ω—É –∑–∞–¥–∞—á—É –ø–∞—Ä—Å–∏–Ω–≥–∞"""
        print(f"\nüîç –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –∑–∞–¥–∞—á–∞: {task['name']}")
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–æ–º–ø—Ç
        prompt = f"""–¢—ã - —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –∏–∑–≤–ª–µ—á–µ–Ω–∏—é –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤.

–î–û–ö–£–ú–ï–ù–¢:
```
{document_text[:15000]}  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –¥–ª—è LLM
```

–ó–ê–î–ê–ß–ê:
{task['description']}

–í–ê–ñ–ù–û:
1. –û—Ç–≤–µ—á–∞–π –¢–û–õ–¨–ö–û –≤–∞–ª–∏–¥–Ω—ã–º JSON, –±–µ–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –æ–±—ä—è—Å–Ω–µ–Ω–∏–π
2. –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã, –≤–µ—Ä–Ω–∏ –ø—É—Å—Ç–æ–π –æ–±—ä–µ–∫—Ç {{}}
3. –°–æ—Ö—Ä–∞–Ω—è–π —Ç–æ—á–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–∞
4. –î–ª—è —á–∏—Å–µ–ª –∏—Å–ø–æ–ª—å–∑—É–π —á–∏—Å–ª–æ–≤–æ–π —Ç–∏–ø, –¥–ª—è —Ç–µ–∫—Å—Ç–∞ - —Å—Ç—Ä–æ–∫–∏

–û–¢–í–ï–¢ (—Ç–æ–ª—å–∫–æ JSON):"""

        # –í—ã–∑—ã–≤–∞–µ–º LLM
        response = self.call_llm(prompt)
        
        if not response:
            print(f"   ‚ö†Ô∏è  –ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –æ—Ç LLM")
            return {}
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º JSON –∏–∑ –æ—Ç–≤–µ—Ç–∞
        try:
            # –ò—â–µ–º JSON –≤ –æ—Ç–≤–µ—Ç–µ (–º–æ–∂–µ—Ç –±—ã—Ç—å –æ–±—ë—Ä–Ω—É—Ç –≤ markdown –∏–ª–∏ —Ç–µ–∫—Å—Ç)
            json_match = re.search(r'\{.*\}', response, re.DOTALL)
            if json_match:
                json_str = json_match.group(0)
                result = json.loads(json_str)
                print(f"   ‚úÖ –£—Å–ø–µ—à–Ω–æ –∏–∑–≤–ª–µ—á–µ–Ω–æ: {len(str(result))} —Å–∏–º–≤–æ–ª–æ–≤")
                return result
            else:
                print(f"   ‚ö†Ô∏è  JSON –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –æ—Ç–≤–µ—Ç–µ")
                print(f"   –û—Ç–≤–µ—Ç: {response[:200]}...")
                return {}
        
        except json.JSONDecodeError as e:
            print(f"   ‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON: {e}")
            print(f"   –û—Ç–≤–µ—Ç: {response[:500]}...")
            return {}
    
    def parse_document(self, document_path: str, instructions_path: str) -> Dict[str, Any]:
        """–ü–∞—Ä—Å–∏—Ç –¥–æ–∫—É–º–µ–Ω—Ç –ø–æ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º"""
        # –ß–∏—Ç–∞–µ–º –¥–æ–∫—É–º–µ–Ω—Ç
        with open(document_path, 'r', encoding='utf-8') as f:
            document_text = f.read()
        
        print(f"üìÑ –ó–∞–≥—Ä—É–∂–µ–Ω –¥–æ–∫—É–º–µ–Ω—Ç: {Path(document_path).name}")
        print(f"   –†–∞–∑–º–µ—Ä: {len(document_text)} —Å–∏–º–≤–æ–ª–æ–≤")
        
        # –ß–∏—Ç–∞–µ–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏
        tasks = self.parse_instructions_file(instructions_path)
        print(f"üìã –ó–∞–≥—Ä—É–∂–µ–Ω–æ –∑–∞–¥–∞—á: {len(tasks)}")
        for task in tasks:
            print(f"   - {task['name']}")
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–¥–∞—á–∏
        result = {
            "file_info": {
                "source_file": Path(document_path).name,
                "instructions_file": Path(instructions_path).name,
                "parsing_method": "llm_instructions",
                "model": self.model
            },
            "extracted_data": {}
        }
        
        for task in tasks:
            task_result = self.execute_task(task, document_text)
            result['extracted_data'][task['output_key']] = task_result
        
        return result


def main():
    parser = argparse.ArgumentParser(
        description='LLM-based –ø–∞—Ä—Å–µ—Ä —Å —á–µ–ª–æ–≤–µ—á–µ—Å–∫–∏–º–∏ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º–∏'
    )
    parser.add_argument('--input', '-i', required=True,
                       help='–í—Ö–æ–¥–Ω–æ–π —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª')
    parser.add_argument('--instructions', '-ins', required=True,
                       help='–§–∞–π–ª —Å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º–∏ –¥–ª—è LLM')
    parser.add_argument('--output', '-o',
                       help='–í—ã—Ö–æ–¥–Ω–æ–π JSON —Ñ–∞–π–ª (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: –∏–º—è_—Ñ–∞–π–ª–∞_llm_parsed.json)')
    parser.add_argument('--model', '-m', required=True,
                       help='–ú–æ–¥–µ–ª—å LLM (–Ω–∞–ø—Ä–∏–º–µ—Ä: yandex/YandexGPT-5-Lite-8B-instruct-GGUF:latest)')
    parser.add_argument('--ollama-url', required=True,
                       help='URL Ollama —Å–µ—Ä–≤–µ—Ä–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: https://server:443)')
    parser.add_argument('--token', '-t',
                       help='–¢–æ–∫–µ–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –¥–ª—è API')
    parser.add_argument('--no-ssl-verify', action='store_true',
                       help='–û—Ç–∫–ª—é—á–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞')
    
    args = parser.parse_args()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∞–π–ª—ã
    input_path = Path(args.input)
    instructions_path = Path(args.instructions)
    
    if not input_path.exists():
        print(f"‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {input_path}")
        return
    
    if not instructions_path.exists():
        print(f"‚ùå –§–∞–π–ª –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω: {instructions_path}")
        return
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≤—ã—Ö–æ–¥–Ω–æ–π —Ñ–∞–π–ª
    if args.output:
        output_path = Path(args.output)
    else:
        output_path = input_path.parent / f"{input_path.stem}_llm_parsed.json"
    
    print("="*80)
    print("ü§ñ LLM INSTRUCTION PARSER")
    print("="*80)
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–∞—Ä—Å–µ—Ä
    llm_parser = LLMInstructionParser(
        ollama_url=args.ollama_url,
        model=args.model,
        token=args.token,
        verify_ssl=not args.no_ssl_verify
    )
    
    # –ü–∞—Ä—Å–∏–º –¥–æ–∫—É–º–µ–Ω—Ç
    result = llm_parser.parse_document(str(input_path), str(instructions_path))
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    with open(output_path, 'w', encoding='utf-8') as f:
        json.dump(result, f, ensure_ascii=False, indent=2)
    
    print(f"\nüíæ –†–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω: {output_path}")
    print()
    print("üìä –ò–∑–≤–ª–µ—á–µ–Ω–æ —Ä–∞–∑–¥–µ–ª–æ–≤:")
    for key, value in result['extracted_data'].items():
        if isinstance(value, dict):
            print(f"   {key}: {len(value)} –ø–æ–ª–µ–π")
        elif isinstance(value, list):
            print(f"   {key}: {len(value)} —ç–ª–µ–º–µ–Ω—Ç–æ–≤")
        else:
            print(f"   {key}: {type(value).__name__}")
    
    print("="*80)


if __name__ == "__main__":
    main()




