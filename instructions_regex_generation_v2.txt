# ============================================
# ИНСТРУКЦИИ ДЛЯ LLM: АНАЛИЗ ДОКУМЕНТА И ГЕНЕРАЦИЯ REGEX
# ============================================
#
# ФОРМАТ ИНСТРУКЦИИ:
# Пользователь описывает ЧТО нужно найти (человеческим языком)
# LLM должна:
# 1. Найти эти данные в документе
# 2. Создать regex паттерны для найденных данных
# 3. Вернуть JSON с данными и regex
#
# ============================================

Ты эксперт по анализу технических документов и созданию регулярных выражений.

ТВОЯ ЗАДАЧА:
1. Проанализируй документ
2. Найди указанные данные
3. Для КАЖДОГО найденного элемента создай REGEX паттерн
4. Верни JSON с найденными данными И regex паттернами

════════════════════════════════════════════════════════════════
ЧТО НУЖНО НАЙТИ В ДОКУМЕНТЕ
════════════════════════════════════════════════════════════════

## РАЗДЕЛ 1: МЕТАДАННЫЕ ДОКУМЕНТА

Найди следующие данные в начале документа:

1. **Номер документа** (переменная: `document_number`)
   - Формат: ЦЦ-ЦЦЦЦ (например: 01-0530)
   - Обычно находится в самом начале документа

2. **Дата документа** (переменная: `date`)
   - Формат: ММ.ГГГГ (например: 04.2025)
   - Находится после номера документа

3. **Список адресатов** (переменная: `addressees`)
   - Строки начинаются с "Начальнику"
   - Может быть несколько адресатов

---

## РАЗДЕЛ 2: ПАРАМЕТРЫ СТАЛИ

Найди ВСЕ параметры стали в начале документа:

1. **Марка стали** (переменная: `steel_grade`)
   - Ищи после текста "стали марки"
   - Это число (например: 6856)

2. **Вариант** (переменная: `variant`)
   - Ищи после слова "вариант"
   - Обычно число 0, 1, 2 и т.д.

3. **Код ОЭМК** (переменная: `code_oemk`)
   - Ищи после текста "код ОЭМК"
   - Может содержать буквы и цифры (например: dэ7)

4. **Код вида продукции** (переменная: `production_code`)
   - Ищи после текста "код вида продукции"
   - Числовой код (например: 090116)

5. **Экспортное наименование** (переменная: `export_name`)
   - Ищи после текста "экспортное наименование"
   - Обычно буквенно-цифровой код (например: 42CrMoS4+H)

6. **Условный аналог** (переменная: `analog`)
   - Ищи после текста "условный аналог"
   - Обычно кириллица с цифрами (например: З8ХГМ)

7. **Стандарт выплавки** (переменная: `melting_standard`)
   - Ищи после текста "стандарт выплавки"
   - Текстовое описание (например: "настоящее ДП/25")

8. **Номер потребительских свойств** (переменная: `consumer_properties_number`)
   - Ищи после "№ потребительских свойств" или "Ng потребительских свойств"

---

## РАЗДЕЛ 3: ТАБЛИЦА 1 - ХИМИЧЕСКИЙ СОСТАВ

Найди Таблицу 1 с химическим составом:

1. **Название таблицы** (переменная: `table_title`)
   - Должно быть что-то про "химический состав"

2. **Список химических элементов** (переменная: `elements`)
   - Это заголовки столбцов таблицы
   - Обычно: С, Si, Mn, S, P, Cr, Ni, Cu, Al, Mo и т.д.
   - Верни их как массив

3. **Рекомендуемые значения** (переменная: `recommended`)
   - Ищи строку с маркером "Рекоменд" или "рекомендуемый"
   - Извлеки числовые значения для каждого элемента
   - Верни как объект: {"С": "0.42", "Si": "0.25", ...}

4. **Аттестатные значения** (переменная: `certificate`)
   - Ищи строку с маркером "Аттестат" или "сертификат"
   - Извлеки значения (могут быть "н.б." для некоторых)

5. **Значения ЭСПЦ** (переменная: `espz`)
   - Ищи строку с маркером "ЭСПЦ"
   - Извлеки числовые значения

ВАЖНО: Таблица может быть разбросана по нескольким строкам!

---

## РАЗДЕЛ 4: ПРОИЗВОДСТВЕННЫЕ ПАРАМЕТРЫ

Найди следующие числовые параметры в разделе "ПРОИЗВОДСТВО НЛЗ":

1. **Расход лома** (переменная: `scrap_consumption`)
   - Ищи после "Расход лома"
   - Число или диапазон с единицей измерения (тонн/т)
   - Верни: {"value": "65-75", "unit": "тонн"}

2. **Количество алюминия на выпуске** (переменная: `aluminum_on_release`)
   - Ищи после "присаживается" и "алюминия"
   - Число с единицей (кг)
   - Верни: {"value": "60-75", "unit": "кг"}

3. **Температуры** (из Таблицы 2):
   - **Температура выпуска из печи** (переменная: `temperature_release_from_furnace`)
   - **Температура перед УНРС** (переменная: `temperature_before_unrs`)
   - **Температура в промковше** (переменная: `temperature_in_tundish`)
   - Для каждой верни: {"min": "значение", "max": "значение", "unit": "°C"}

4. **Скорость разливки** (переменная: `casting_speed`)
   - Ищи после "Скорость разливки"
   - Рабочая скорость и диапазон
   - Верни: {"working": "0,55", "range": "0,50-0,60", "unit": "м/мин"}

5. **Группа качества НЛЗ** (переменная: `nlz_quality_group`)
   - Ищи после "Группа качества НЛЗ"
   - Верни: {"value": "1", "standard": "СТП 025"}

---

## РАЗДЕЛ 5: ТАБЛИЦА 4 - ДИАМЕТРЫ И ДОПУСКИ

Найди Таблицу 4 с размерами проката:

1. **Заголовки столбцов** (переменная: `headers`)
   - Диаметр, Допуск по диаметру, Разность диаметров, Отклонение от перпендикулярности, Дефекты

2. **Строки данных** (переменная: `rows`)
   - Извлеки ВСЕ строки с данными (обычно от 85 мм до 190 мм)
   - Каждая строка должна содержать: diameter, tolerance, difference, perpendicularity, defects
   - Верни как массив объектов

---

## РАЗДЕЛ 6: СТРУКТУРА ДОКУМЕНТА

Найди границы основных разделов документа:

1. **Раздел 1: ПРОИЗВОДСТВО НЛЗ**
   - Найди заголовок "ПРОИЗВОДСТВО НЛЗ" или "1. ПРОИЗВОДСТВО НЛЗ"
   - Посчитай количество подразделов (1.1, 1.2, 1.3, ...)
   - Верни: {"number": "1", "title": "ПРОИЗВОДСТВО НЛЗ", "subsections": ["1.1", "1.2", ...]}

2. **Раздел 2: ПРОИЗВОДСТВО ПРОКАТА**
   - Найди заголовок "ПРОИЗВОДСТВО ПРОКАТА"
   - Посчитай подразделы (2.1, 2.2, 2.3, ...)

3. **Раздел 3: КОНТРОЛЬ И АТТЕСТАЦИЯ**
   - Найди заголовок "КОНТРОЛЬ И АТТЕСТАЦИЯ"
   - Посчитай подразделы (3.1, 3.2, 3.3, ...)

════════════════════════════════════════════════════════════════
КАК СОЗДАВАТЬ REGEX ПАТТЕРНЫ
════════════════════════════════════════════════════════════════

Для КАЖДОГО найденного элемента данных создай REGEX паттерн, который:

1. **Учитывает контекст**
   - Что находится ДО значения
   - Что находится ПОСЛЕ значения

2. **Использует группы захвата** `()`
   - Для извлечения нужных значений

3. **Использует правильные флаги**:
   - `MULTILINE` - для паттернов с `^`, `$` и `\n`
   - `DOTALL` - когда `.` должна включать `\n`
   - `IGNORECASE` - для нечувствительности к регистру

4. **Экранирование в JSON**:
   - Используй двойные слеши: `\\d`, `\\s`, `\\n`, `\\w`

5. **Non-greedy кванторы**:
   - Используй `*?` и `+?` чтобы избежать жадного захвата

════════════════════════════════════════════════════════════════
ФОРМАТ ОТВЕТА
════════════════════════════════════════════════════════════════

Верни результат в формате JSON:

```json
{
  "document_info": {
    "filename": "название_файла",
    "analysis_method": "llm_with_regex_generation"
  },
  "sections": {
    "document_metadata": {
      "extracted_data": {
        "document_number": "найденное значение",
        "date": "найденное значение",
        "addressees": ["найденные значения"]
      },
      "regex_patterns": {
        "document_number": {
          "pattern": "твой regex паттерн",
          "flags": ["MULTILINE"],
          "context_before": "что до",
          "context_after": "что после",
          "example_match": "пример совпадения",
          "description": "описание"
        },
        "date": { ... },
        "addressees": { ... }
      }
    },
    "steel_parameters": {
      "extracted_data": {
        "steel_grade": "найденное значение",
        "variant": "найденное значение",
        ...
      },
      "regex_patterns": {
        "steel_grade": { ... },
        "variant": { ... },
        ...
      }
    },
    "table_1_chemical_composition": {
      "extracted_data": {
        "table_number": "1",
        "table_title": "Химический состав",
        "elements": ["С", "Si", ...],
        "rows": {
          "recommended": {"С": "0.42", ...},
          "certificate": {"С": "0.40", ...},
          "espz": {"С": "0.45", ...}
        }
      },
      "regex_patterns": { ... }
    },
    ... остальные разделы ...
  }
}
```

════════════════════════════════════════════════════════════════
ВАЖНО!
════════════════════════════════════════════════════════════════

1. Ты должен САМ найти данные в тексте документа
2. Ты должен САМ создать regex паттерны для этих данных
3. НЕ копируй примеры - создай реальные паттерны на основе документа
4. Проверь, что regex работают на приведенном тексте
5. Верни ТОЛЬКО валидный JSON без markdown блоков

════════════════════════════════════════════════════════════════


