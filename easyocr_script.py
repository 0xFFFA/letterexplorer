#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
OCR —Å–∫—Ä–∏–ø—Ç —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º EasyOCR –¥–ª—è –ª—É—á—à–µ–≥–æ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü.
–¢–∞–±–ª–∏—Ü—ã –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è—é—Ç—Å—è –≤ Markdown —Ñ–æ—Ä–º–∞—Ç–µ.
"""

import argparse
import sys
from pathlib import Path
from pdf2image import convert_from_path
from img2table.document import Image as Img2TableImage
from img2table.ocr import EasyOCR
import pytesseract
from PIL import Image
import pandas as pd
from typing import List, Dict, Any

class EasyOCRProcessor:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ PDF —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º EasyOCR"""
    
    def __init__(self, pdf_path: Path, output_dir: Path, dpi: int = 400, use_gpu: bool = False, min_confidence: int = 30):
        self.pdf_path = pdf_path
        self.output_dir = output_dir
        self.dpi = dpi
        self.use_gpu = use_gpu
        self.min_confidence = min_confidence
        self.output_dir.mkdir(parents=True, exist_ok=True)
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º EasyOCR –æ–¥–∏–Ω —Ä–∞–∑
        gpu_status = "GPU" if use_gpu else "CPU"
        print(f"üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º EasyOCR ({gpu_status})...")
        self.ocr = EasyOCR(lang=["ru", "en"], kw={"gpu": use_gpu})
    
    def convert_pdf_to_images(self) -> List[Image.Image]:
        """–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç PDF –≤ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
        print(f"üìÑ –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º PDF –≤ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (DPI={self.dpi})...")
        try:
            images = convert_from_path(
                str(self.pdf_path),
                dpi=self.dpi,
                fmt='png'
            )
            print(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ {len(images)} —Å—Ç—Ä–∞–Ω–∏—Ü")
            return images
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ PDF: {e}")
            sys.exit(1)
    
    def extract_tables_from_image(self, image_path: Path) -> List[Dict[str, Any]]:
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç —Ç–∞–±–ª–∏—Ü—ã –∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
        try:
            # detect_rotation=True –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –Ω–∞–∫–ª–æ–Ω–∞
            img_doc = Img2TableImage(src=str(image_path), detect_rotation=True)
            tables = img_doc.extract_tables(
                ocr=self.ocr,
                implicit_rows=True,
                borderless_tables=True,
                min_confidence=self.min_confidence
            )
            
            result = []
            for table in tables:
                result.append({
                    'df': table.df,
                    'bbox': table.bbox
                })
            
            return result
        except Exception as e:
            print(f"‚ö†Ô∏è  –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–∏ —Ç–∞–±–ª–∏—Ü: {e}")
            return []
    
    def extract_text_from_image(self, image_path: Path) -> str:
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –≤–µ—Å—å —Ç–µ–∫—Å—Ç —Å–æ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∏—Å–ø–æ–ª—å–∑—É—è Tesseract"""
        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º pytesseract –¥–ª—è –æ–±—ã—á–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ (–±—ã—Å—Ç—Ä–µ–µ —á–µ–º EasyOCR)
            text = pytesseract.image_to_string(
                str(image_path),
                lang='rus+eng',
                config='--psm 6'
            )
            return text.strip()
        except Exception as e:
            print(f"‚ö†Ô∏è  –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–∏ —Ç–µ–∫—Å—Ç–∞: {e}")
            return ""
    
    def dataframe_to_markdown(self, df: pd.DataFrame) -> str:
        """–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç DataFrame –≤ Markdown —Ç–∞–±–ª–∏—Ü—É"""
        lines = []
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        headers = []
        for col in df.columns:
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø—É—Å—Ç—ã–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏
            header = str(col) if col is not None and str(col) != 'None' else ''
            headers.append(header)
        
        lines.append('| ' + ' | '.join(headers) + ' |')
        lines.append('|' + '|'.join(['---' for _ in headers]) + '|')
        
        # –î–∞–Ω–Ω—ã–µ
        for _, row in df.iterrows():
            cells = []
            for val in row:
                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø—É—Å—Ç—ã–µ —è—á–µ–π–∫–∏
                if pd.isna(val) or val is None or str(val) == 'None':
                    cell = ''
                else:
                    cell = str(val).replace('\n', ' ').strip()
                cells.append(cell)
            lines.append('| ' + ' | '.join(cells) + ' |')
        
        return '\n'.join(lines)
    
    def process_page(self, page_num: int, image: Image.Image, table_counter: int) -> tuple[str, int]:
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ–¥–Ω—É —Å—Ç—Ä–∞–Ω–∏—Ü—É. –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç (—Ç–µ–∫—Å—Ç_—Å—Ç—Ä–∞–Ω–∏—Ü—ã, –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π_—Å—á–µ—Ç—á–∏–∫_—Ç–∞–±–ª–∏—Ü)"""
        print(f"\n{'='*70}")
        print(f"üìÑ –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã {page_num}")
        print(f"{'='*70}")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        image_path = self.output_dir / f"page_{page_num}.png"
        image.save(image_path, "PNG")
        
        result_parts = []
        result_parts.append(f"\n{'='*70}")
        result_parts.append(f"–°–¢–†–ê–ù–ò–¶–ê {page_num}")
        result_parts.append(f"{'='*70}\n")
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã
        print("üîç –ü–æ–∏—Å–∫ —Ç–∞–±–ª–∏—Ü...")
        tables = self.extract_tables_from_image(image_path)
        
        if tables:
            print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ —Ç–∞–±–ª–∏—Ü: {len(tables)}")
        else:
            print("‚ÑπÔ∏è  –¢–∞–±–ª–∏—Ü—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç
        print("üìù –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞...")
        text = self.extract_text_from_image(image_path)
        
        if text:
            result_parts.append("## –¢–µ–∫—Å—Ç\n")
            result_parts.append(text)
            result_parts.append("\n")
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ç–∞–±–ª–∏—Ü—ã —Å–æ —Å–∫–≤–æ–∑–Ω–æ–π –Ω—É–º–µ—Ä–∞—Ü–∏–µ–π
        if tables:
            result_parts.append(f"\n## –¢–∞–±–ª–∏—Ü—ã (–Ω–∞–π–¥–µ–Ω–æ: {len(tables)})\n")
            
            for table_info in tables:
                df = table_info['df']
                bbox = table_info['bbox']
                
                # –ò–Ω–∫—Ä–µ–º–µ–Ω—Ç–∏—Ä—É–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —Å—á–µ—Ç—á–∏–∫
                table_counter += 1
                
                print(f"üìä –¢–∞–±–ª–∏—Ü–∞ {table_counter}: {df.shape[0]}√ó{df.shape[1]} (–ø–æ–∑–∏—Ü–∏—è: {bbox})")
                
                result_parts.append(f"\n### –¢–∞–±–ª–∏—Ü–∞ {table_counter}")
                result_parts.append(f"–†–∞–∑–º–µ—Ä: {df.shape[0]} —Å—Ç—Ä–æ–∫ √ó {df.shape[1]} —Å—Ç–æ–ª–±—Ü–æ–≤")
                result_parts.append(f"–ü–æ–∑–∏—Ü–∏—è: {bbox}\n")
                
                # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ Markdown
                markdown_table = self.dataframe_to_markdown(df)
                result_parts.append(markdown_table)
                result_parts.append("")
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–∞–∫–∂–µ –≤ CSV —Å–æ —Å–∫–≤–æ–∑–Ω–æ–π –Ω—É–º–µ—Ä–∞—Ü–∏–µ–π
                csv_path = self.output_dir / f"table{table_counter}.csv"
                df.to_csv(csv_path, index=False, encoding='utf-8')
                print(f"   üíæ CSV: {csv_path}")
        
        return '\n'.join(result_parts), table_counter
    
    def process(self) -> str:
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–µ—Å—å PDF"""
        print(f"\n{'='*70}")
        print(f"üöÄ –û–ë–†–ê–ë–û–¢–ö–ê PDF: {self.pdf_path.name}")
        print(f"{'='*70}\n")
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º PDF –≤ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        images = self.convert_pdf_to_images()
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å–æ —Å–∫–≤–æ–∑–Ω–æ–π –Ω—É–º–µ—Ä–∞—Ü–∏–µ–π —Ç–∞–±–ª–∏—Ü
        all_pages = []
        table_counter = 0  # –ì–ª–æ–±–∞–ª—å–Ω—ã–π —Å—á–µ—Ç—á–∏–∫ —Ç–∞–±–ª–∏—Ü
        
        for page_num, image in enumerate(images, start=1):
            page_text, table_counter = self.process_page(page_num, image, table_counter)
            all_pages.append(page_text)
        
        # –û–±—ä–µ–¥–∏–Ω—è–µ–º –≤—Å—ë
        final_text = '\n\n'.join(all_pages)
        
        return final_text
    
    def save_result(self, text: str) -> Path:
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª"""
        output_file = self.output_dir / f"{self.pdf_path.stem}.txt"
        
        with open(output_file, 'w', encoding='utf-8') as f:
            f.write(text)
        
        print(f"\n{'='*70}")
        print(f"‚úÖ –†–ï–ó–£–õ–¨–¢–ê–¢ –°–û–•–†–ê–ù–Å–ù")
        print(f"{'='*70}")
        print(f"üìù –¢–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª: {output_file}")
        print(f"üìÇ –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ–∞–π–ª—ã: {self.output_dir}/")
        
        return output_file


def main():
    parser = argparse.ArgumentParser(
        description='OCR —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º EasyOCR –¥–ª—è –ª—É—á—à–µ–≥–æ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü',
        formatter_class=argparse.RawDescriptionHelpFormatter,
        epilog="""
–ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:
  %(prog)s input/document.pdf
  %(prog)s input/document.pdf --output output/easyocr/
  %(prog)s input/document.pdf --dpi 400
  %(prog)s input/document.pdf --gpu  # –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å GPU –¥–ª—è —É—Å–∫–æ—Ä–µ–Ω–∏—è
        """
    )
    
    parser.add_argument(
        'pdf_file',
        type=str,
        help='–ü—É—Ç—å –∫ PDF —Ñ–∞–π–ª—É'
    )
    
    parser.add_argument(
        '--output', '-o',
        type=str,
        default=None,
        help='–ü–∞–ø–∫–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: output/[–∏–º—è_—Ñ–∞–π–ª–∞]_easyocr/)'
    )
    
    parser.add_argument(
        '--dpi',
        type=int,
        default=400,
        help='DPI –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ PDF –≤ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: 400)'
    )
    
    parser.add_argument(
        '--gpu',
        action='store_true',
        help='–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å GPU –¥–ª—è EasyOCR (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: CPU)'
    )
    
    parser.add_argument(
        '--min-confidence',
        type=int,
        default=30,
        help='–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å OCR –¥–ª—è —è—á–µ–π–∫–∏ —Ç–∞–±–ª–∏—Ü—ã (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: 30)'
    )
    
    args = parser.parse_args()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ö–æ–¥–Ω–æ–π —Ñ–∞–π–ª
    pdf_path = Path(args.pdf_file)
    if not pdf_path.exists():
        print(f"‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {pdf_path}")
        sys.exit(1)
    
    if pdf_path.suffix.lower() != '.pdf':
        print(f"‚ùå –§–∞–π–ª –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ PDF: {pdf_path}")
        sys.exit(1)
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–∞–ø–∫—É –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    if args.output:
        output_dir = Path(args.output)
    else:
        output_dir = Path('output') / f"{pdf_path.stem}_easyocr"
    
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º PDF
    processor = EasyOCRProcessor(
        pdf_path, 
        output_dir, 
        dpi=args.dpi, 
        use_gpu=args.gpu,
        min_confidence=args.min_confidence
    )
    text = processor.process()
    output_file = processor.save_result(text)
    
    print(f"\n‚ú® –ì–æ—Ç–æ–≤–æ!")


if __name__ == '__main__':
    main()

